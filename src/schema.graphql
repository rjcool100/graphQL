type Query{
        greeting(name:String!):String!,
        arr:[Int!]!,
        add(numbers:[Float!]):Int!
        me:User!,
        users:[User!]!,
        post:Post!,
        comments:[Comment!]!,
        posts(query:String!):[Post!]!
    }

    type Mutation{
        createUser(data:createUserInput!):User!,
        deleteUser(id:ID!):User!,
        updateUser(id:ID!,data:updateUserInput!):User!,
        createPost(data:createPostInput!):Post!,
        deletePost(id:ID!):Post!,
        updatePost(id:ID!,data:updatePostInput!):Post!,
        createComment(data:createCommentInput!):Comment!,
        deleteComment(id:ID!):Comment!
        updateComment(id:ID!,data:updateCommentInput!):Comment!,
    }

    type Subscription{
        count:Int!,
        comment(id:ID!):CommmentSubsciptionPayload!,
        post:PostSubsciptionPayload
    }

    input createUserInput{
        name:String!,
        age:Int,
        email:String!
    }

    input updateUserInput{
        name:String,
        age:Int,
        email:String
    }
    
    input createPostInput{
        name:String!,
        topic:String!,
        author:ID!
    }

    input updatePostInput{
        name:String,
        topic:String
    }
    
    input createCommentInput{
        text:String!,
        author:ID!,
        post:ID!
    } 

    input updateCommentInput{
        text:String
    } 

    type User{
        id: ID!,
        name:String!,
        email:String!,
        age:Int,
        posts:[Post!]!,
        comments:[Comment!]!
    }

    type Post{
        id:ID!,
        name:String!,
        topic:String!,
        author:User!,
        comments:[Comment!]!
    }

    type Comment{
        id: ID!,
        text:String!,
        author:User!,
        post:Post!
    }

    type PostSubsciptionPayload{
        mutation:String!,
        data:Post
    }

    type CommmentSubsciptionPayload{
        mutation:String!,
        data:Comment
    }